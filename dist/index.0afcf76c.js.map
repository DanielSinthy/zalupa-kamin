{"mappings":"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","sources":["<anon>","src/index.js"],"sourcesContent":["const config = {\n    heat: 1000,\n    colors: {\n        start: `rgb(255, 255, 0)`,\n        end: `rgb(255, 150, 0)`\n    }\n};\nfunction radomMinMax(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\nfunction randomXY(cx, cy) {\n    return {\n        x: radomMinMax(this.x - cx, this.x + cx),\n        y: radomMinMax(this.y - cy * Math.random(), this.y - cy * Math.random())\n    };\n}\nclass Particle {\n    constructor(fireplace){\n        this.randomXY = randomXY.bind(this);\n        this.fireplace = fireplace;\n        this.x = radomMinMax(this.fireplace.size.cx - 50, this.fireplace.size.cx + 50);\n        this.y = this.fireplace.size.cy;\n        this.size = 8;\n        this.color = config.colors.start;\n        this.bezierPoints = [\n            {\n                x: this.x,\n                y: this.y\n            },\n            this.randomXY(100, 50),\n            this.randomXY(80, 150),\n            this.randomXY(10, 300)\n        ];\n        this.speed = 0.01;\n        this.t = 0;\n    }\n    updateOnMouse() {\n        let dx = this.fireplace.mouse.x - this.x;\n        let dy = this.fireplace.mouse.y - this.y;\n        let distance = dx ** 2 + dy ** 2;\n        let force = -this.fireplace.mouse.radius / distance;\n        let angle = 0;\n        if (distance < this.fireplace.mouse.radius) {\n            angle = Math.atan2(dy, dx);\n            this.bezierPoints.forEach((point)=>{\n                point.x += force * Math.cos(angle);\n                point.y += force * Math.sin(angle);\n            });\n        }\n    }\n    updateColors() {\n        let [, r, g, b] = this.fireplace.rgb.start;\n        let dx = this.fireplace.size.cx - this.x;\n        let dy = this.fireplace.size.cy - this.y;\n        let distance = dx ** 2 + dy ** 2;\n        r = Math.ceil(Math.max(this.fireplace.rgb.end[1], r - distance * this.speed));\n        g = Math.ceil(Math.max(this.fireplace.rgb.end[2], g - distance * this.speed));\n        b = Math.ceil(Math.max(this.fireplace.rgb.end[3], b - distance * this.speed));\n        this.color = `rgb(${[\n            r,\n            g,\n            b\n        ].join(\",\")})`;\n    }\n    updateParticles([p0, p1, p2, p3]) {\n        // * Calculate coefficients based on a particle current position\n        let cx = 3 * (p1.x - p0.x);\n        let bx = 3 * (p2.x - p1.x) - cx;\n        let ax = p3.x - p0.x - cx - bx;\n        let cy = 3 * (p1.y - p0.y);\n        let by = 3 * (p2.y - p1.y) - cy;\n        let ay = p3.y - p0.y - cy - by;\n        this.t += this.speed;\n        // * Calculate new X & Y positions\n        let xt = ax * (this.t * this.t * this.t) + bx * (this.t * this.t) + cx * this.t + p0.x;\n        let yt = ay * (this.t * this.t * this.t) + by * (this.t * this.t) + cy * this.t + p0.y;\n        if (this.t > 1) this.t = 0;\n        this.size -= 0.05;\n        if (this.size < 0.5) this.size = 0.5;\n        this.x = xt;\n        this.y = yt;\n    }\n    update() {\n        this.updateParticles(this.bezierPoints);\n        this.updateOnMouse();\n        this.updateColors();\n    }\n    draw(context) {\n        context.fillStyle = this.color;\n        context.fillRect(this.x, this.y, this.size, this.size);\n    }\n}\nclass Fireplace {\n    constructor(){\n        this.cnv = null;\n        this.ctx = null;\n        this.size = {\n            w: 0,\n            h: 0,\n            cx: 0,\n            cy: 0\n        };\n        this.particles = [];\n        this.rgb = {\n            start: /rgb\\((\\d{1,3}), (\\d{1,3}), (\\d{1,3})\\)/.exec(config.colors.start),\n            end: /rgb\\((\\d{1,3}), (\\d{1,3}), (\\d{1,3})\\)/.exec(config.colors.end)\n        };\n        this.particlesSpawnRate = 10;\n        this.mouse = {\n            radius: 3000,\n            x: undefined,\n            y: undefined\n        };\n        window.addEventListener(\"mousemove\", (event)=>{\n            this.mouse.x = event.x;\n            this.mouse.y = event.y;\n        });\n        window.addEventListener(\"touchmove\", (event)=>{\n            this.mouse.x = event.touches[0].clientX;\n            this.mouse.y = event.touches[0].clientY;\n        });\n    }\n    init() {\n        this.createCanvas();\n        this.updateAnimation();\n    }\n    createCanvas() {\n        this.cnv = document.createElement(`canvas`);\n        this.ctx = this.cnv.getContext(`2d`);\n        this.setCanvasSize();\n        document.body.appendChild(this.cnv);\n        window.addEventListener(`resize`, ()=>this.setCanvasSize());\n    }\n    setCanvasSize() {\n        this.size.w = this.cnv.width = window.innerWidth;\n        this.size.h = this.cnv.height = window.innerHeight;\n        this.size.cx = this.size.w / 2;\n        this.size.cy = this.size.h / 2 + 200;\n    }\n    generateParticles() {\n        for(let i = 0; i < this.particlesSpawnRate; i++)this.particles.push(new Particle(this));\n        let particlesShift = this.particles.length > config.heat ? this.particlesSpawnRate : this.particlesSpawnRate / 2;\n        for(let i = 0; i < particlesShift; i++)this.particles.shift();\n    }\n    drawParticles() {\n        this.particles.forEach((particle)=>particle.update());\n        this.particles.forEach((particle)=>particle.draw(this.ctx));\n        this.generateParticles();\n    }\n    updateCavas() {\n        this.ctx.fillStyle = `rgb(22, 22, 25)`;\n        this.ctx.fillRect(0, 0, this.size.w, this.size.h);\n        this.ctx.shadowColor = config.colors.end;\n        this.ctx.shadowBlur = 25;\n    }\n    updateAnimation() {\n        this.updateCavas();\n        this.drawParticles();\n        requestAnimationFrame(()=>this.updateAnimation());\n    }\n}\nnew Fireplace().init();\n\n//# sourceMappingURL=index.0afcf76c.js.map\n","const config = {\n    heat: 1000,\n    colors: { start: `rgb(255, 255, 0)`, end: `rgb(255, 150, 0)` }\n  };\n  \n  function radomMinMax(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n  function randomXY(cx, cy) {\n    return {\n      x: radomMinMax(this.x - cx, this.x + cx),\n      y: radomMinMax(this.y - cy * Math.random(), this.y - cy * Math.random())\n    };\n  }\n  \n  class Particle {\n    constructor(fireplace) {\n      this.randomXY = randomXY.bind(this);\n      this.fireplace = fireplace;\n      this.x = radomMinMax(\n        this.fireplace.size.cx - 50,\n        this.fireplace.size.cx + 50\n      );\n      this.y = this.fireplace.size.cy;\n  \n      this.size = 8;\n      this.color = config.colors.start;\n      this.bezierPoints = [\n        { x: this.x, y: this.y },\n        this.randomXY(100, 50),\n        this.randomXY(80, 150),\n        this.randomXY(10, 300)\n      ];\n      this.speed = 0.01;\n      this.t = 0;\n    }\n    updateOnMouse() {\n      let dx = this.fireplace.mouse.x - this.x;\n      let dy = this.fireplace.mouse.y - this.y;\n      let distance = dx ** 2 + dy ** 2;\n      let force = -this.fireplace.mouse.radius / distance;\n      let angle = 0;\n  \n      if (distance < this.fireplace.mouse.radius) {\n        angle = Math.atan2(dy, dx);\n        this.bezierPoints.forEach((point) => {\n          point.x += force * Math.cos(angle);\n          point.y += force * Math.sin(angle);\n        });\n      }\n    }\n    updateColors() {\n      let [, r, g, b] = this.fireplace.rgb.start;\n      let dx = this.fireplace.size.cx - this.x;\n      let dy = this.fireplace.size.cy - this.y;\n      let distance = dx ** 2 + dy ** 2;\n      r = Math.ceil(\n        Math.max(this.fireplace.rgb.end[1], r - distance * this.speed)\n      );\n      g = Math.ceil(\n        Math.max(this.fireplace.rgb.end[2], g - distance * this.speed)\n      );\n      b = Math.ceil(\n        Math.max(this.fireplace.rgb.end[3], b - distance * this.speed)\n      );\n      this.color = `rgb(${[r, g, b].join(\",\")})`;\n    }\n    updateParticles([p0, p1, p2, p3]) {\n      // * Calculate coefficients based on a particle current position\n      let cx = 3 * (p1.x - p0.x);\n      let bx = 3 * (p2.x - p1.x) - cx;\n      let ax = p3.x - p0.x - cx - bx;\n  \n      let cy = 3 * (p1.y - p0.y);\n      let by = 3 * (p2.y - p1.y) - cy;\n      let ay = p3.y - p0.y - cy - by;\n  \n      this.t += this.speed;\n      // * Calculate new X & Y positions\n      let xt =\n        ax * (this.t * this.t * this.t) +\n        bx * (this.t * this.t) +\n        cx * this.t +\n        p0.x;\n      let yt =\n        ay * (this.t * this.t * this.t) +\n        by * (this.t * this.t) +\n        cy * this.t +\n        p0.y;\n  \n      if (this.t > 1) this.t = 0;\n  \n      this.size -= 0.05;\n      if (this.size < 0.5) this.size = 0.5;\n  \n      this.x = xt;\n      this.y = yt;\n    }\n  \n    update() {\n      this.updateParticles(this.bezierPoints);\n      this.updateOnMouse();\n      this.updateColors();\n    }\n    draw(context) {\n      context.fillStyle = this.color;\n      context.fillRect(this.x, this.y, this.size, this.size);\n    }\n  }\n  \n  class Fireplace {\n    constructor() {\n      this.cnv = null;\n      this.ctx = null;\n      this.size = { w: 0, h: 0, cx: 0, cy: 0 };\n      this.particles = [];\n      this.rgb = {\n        start: /rgb\\((\\d{1,3}), (\\d{1,3}), (\\d{1,3})\\)/.exec(config.colors.start),\n        end: /rgb\\((\\d{1,3}), (\\d{1,3}), (\\d{1,3})\\)/.exec(config.colors.end)\n      };\n      this.particlesSpawnRate = 10;\n      this.mouse = {\n        radius: 3000,\n        x: undefined,\n        y: undefined\n      };\n      window.addEventListener(\"mousemove\", (event) => {\n        this.mouse.x = event.x;\n        this.mouse.y = event.y;\n      });\n      window.addEventListener(\"touchmove\", (event) => {\n        this.mouse.x = event.touches[0].clientX;\n        this.mouse.y = event.touches[0].clientY;\n      });\n    }\n    init() {\n      this.createCanvas();\n      this.updateAnimation();\n    }\n    createCanvas() {\n      this.cnv = document.createElement(`canvas`);\n      this.ctx = this.cnv.getContext(`2d`);\n      this.setCanvasSize();\n      document.body.appendChild(this.cnv);\n      window.addEventListener(`resize`, () => this.setCanvasSize());\n    }\n    setCanvasSize() {\n      this.size.w = this.cnv.width = window.innerWidth;\n      this.size.h = this.cnv.height = window.innerHeight;\n      this.size.cx = this.size.w / 2;\n      this.size.cy = this.size.h / 2 + 200;\n    }\n    generateParticles() {\n      for (let i = 0; i < this.particlesSpawnRate; i++) {\n        this.particles.push(new Particle(this));\n      }\n      let particlesShift =\n        this.particles.length > config.heat\n          ? this.particlesSpawnRate\n          : this.particlesSpawnRate / 2;\n      for (let i = 0; i < particlesShift; i++) {\n        this.particles.shift();\n      }\n    }\n    drawParticles() {\n      this.particles.forEach((particle) => particle.update());\n      this.particles.forEach((particle) => particle.draw(this.ctx));\n      this.generateParticles();\n    }\n  \n    updateCavas() {\n      this.ctx.fillStyle = `rgb(22, 22, 25)`;\n      this.ctx.fillRect(0, 0, this.size.w, this.size.h);\n      this.ctx.shadowColor = config.colors.end;\n      this.ctx.shadowBlur = 25;\n    }\n    updateAnimation() {\n      this.updateCavas();\n      this.drawParticles();\n      requestAnimationFrame(() => this.updateAnimation());\n    }\n  }\n  \n  new Fireplace().init();\n  "],"names":["radomMinMax","min","max","Math","floor","random","randomXY","cx","cy","x","y","Particle","constructor","fireplace","bind","size","color","bezierPoints","speed","t","updateOnMouse","dx","mouse","dy","distance","force","radius","angle","atan2","forEach","point","cos","sin","updateColors","r","g","b","rgb","start","ceil","end","join","updateParticles","p0","p1","p2","p3","bx","ax","by","ay","xt","yt","update","draw","context","fillStyle","fillRect","cnv","ctx","w","h","particles","exec","particlesSpawnRate","undefined","window","addEventListener","event","touches","clientX","clientY","init","createCanvas","updateAnimation","document","createElement","getContext","setCanvasSize","body","appendChild","width","innerWidth","height","innerHeight","generateParticles","i","push","particlesShift","length","shift","drawParticles","particle","updateCavas","shadowColor","shadowBlur","requestAnimationFrame"],"version":3,"file":"index.0afcf76c.js.map"}